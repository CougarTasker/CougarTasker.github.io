import { useEffect, useState } from "react";
import docs from "./resources/Docs.json";

const itemHive = `Class'/Script/FactoryGame.FGItemDescriptor'`
const recipeHive = `Class'/Script/FactoryGame.FGRecipe'`



// Generated by https://quicktype.io

type dataClass = {
  [key: string]: dataClass | string
}[]

type hive = {
  NativeClass: string
  Classes: dataClass
}
type loading<T> = { state: "empty" } | { state: "requested", callbacks: (() => void)[] } | { state: "available", value: T };
type dataMap = {
  [key: string]: dataClass
}

let sharedDatabase: loading<dataMap> = { state: "empty" };


function useDatabase(): loading<dataMap> {
  const [database, setDatabase] = useState(sharedDatabase);
  useEffect(() => {
    if (sharedDatabase.state === "empty") {
      sharedDatabase = {
        state: "requested",
        callbacks: [() => {
          setDatabase(sharedDatabase);
        }]
      };
      fetch(`${docs}`).then(r => r.json()).then((data: hive[]) => {
        if (sharedDatabase.state === "requested") {
          const { callbacks } = sharedDatabase;
          sharedDatabase = {
            state: "available",
            value: data.reduce((pre, hive) => pre[hive.NativeClass] = hive.Classes, {})
          }
          for (let cb of callbacks) {
            cb();
          }
        }
      });
    } else if (sharedDatabase.state === "requested") {
      sharedDatabase.callbacks.push(() => {
        setDatabase(sharedDatabase)
      });
    }
  }, []);
  return database;
}

export interface resource {
  name: string
}

function fmap<T, S>(item: loading<T>, m: (a: T) => S): loading < S > {
  if(item.state === "available"){
  return { state: "available", value: m(item.value) }
  }else {
    return { state: "requested", callbacks: [] }
  }
}

function useAllResorces(params: type): loading<resource[]> {

  return
}
function useResource(name: string): loading<resource> {
  return { name: "testing" }
}

export { useResource }